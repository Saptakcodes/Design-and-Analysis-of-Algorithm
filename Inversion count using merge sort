#include<stdio.h>
int merge(int arr[],int left,int mid,int right){
    //int mid=(left+right)/2;
    int n1=mid-left+1;
    int n2=right-mid;
    int L[n1],R[n2];
    //copy left and right elements
    //int i,j,k;
    int inv_count=0;
    for(int i=0;i<n1;i++){
        L[i]=arr[left+i];
    }
    for(int j=0;j<n2;j++){
        R[j]=arr[mid+1+j];
    }
    //merge subarrays
    int i=0,j=0,k=left;
    while(i<n1 && j<n2){
        if (L[i]<=R[j]){
            arr[k++]=L[i++];
        }else{
            arr[k++]=R[j++];
            inv_count+=(n1-i);
        }
    }
    
    //copy remaining elements
    while (i<n1){
        arr[k++]=L[i++];
    }
    while (j<n2){
        arr[k++]=R[j++];
    }
    return inv_count;
}

int mergesort(int arr[],int left,int right){
    int inv_count=0;
    if (left != right){
        int mid=(left+right)/2;
        inv_count+=mergesort(arr,left,mid);
        inv_count+=mergesort(arr,mid+1,right);
        inv_count+=merge(arr,left,mid,right);
    }
    return inv_count;
}
void print(int arr[],int n){
    printf("sorted array is=");
    for (int i=0;i<n;i++){
        printf("%d,",arr[i]);
        
    }
    printf("\n");
}
int main(){
    int arr[]={8,4,2,6,7,9,1,21,67,11};
    int n=sizeof(arr)/sizeof(arr[0]);
    int inv_count=mergesort(arr,0,n-1);
    print(arr,n);
    printf("inversion count pairs=%d",inv_count);
}
